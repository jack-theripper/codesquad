<?php

namespace Codesquad\Models;

use DateTime;
use InvalidArgumentException;
use Phalcon\Mvc\Model;

/**
 * UserToken
 *
 * @package       Codesquad\Models
 * @autogenerated by Phalcon Developer Tools
 * @date          2019-06-03, 02:15:31
 */
class UserToken extends Model
{
	
	/**
	 * The user id value.
	 *
	 * @var integer
	 * @Column(column="user_id", type="integer", length=10, nullable=false)
	 */
	protected $user_id;
	
	/**
	 * The series value.
	 *
	 * @var string
	 * @Primary
	 * @Column(column="series", type="string", length=50, nullable=false)
	 */
	protected $series;
	
	/**
	 * The series hash.
	 *
	 * @var string
	 * @Column(column="series_hash", type="string", length=255, nullable=true)
	 */
	protected $series_hash;
	
	/**
	 * The expires at value.
	 *
	 * @var string
	 * @Column(column="expires_at", type="string", nullable=true)
	 */
	protected $expires_at;
	
	/**
	 * Initialize method for model.
	 */
	public function initialize()
	{
		$this->setSource('users_token');
	}
	
	/**
	 * Method to set the value of field user_id
	 *
	 * @param integer $user_id
	 *
	 * @return $this
	 * @throws InvalidArgumentException
	 */
	public function setUserId($user_id)
	{
		if ( ! is_int($user_id))
		{
			throw new InvalidArgumentException('The user id value must be a integer type.');
		}
		
		$this->user_id = $user_id;
		
		return $this;
	}
	
	/**
	 * Method to set the value of field series
	 *
	 * @param string $series
	 *
	 * @return $this
	 * @throws InvalidArgumentException
	 */
	public function setSeries($series)
	{
		if (trim($series) == '')
		{
			throw new InvalidArgumentException('The series value cannot be empty.');
		}
		
		$this->series = $series;
		
		return $this;
	}
	
	/**
	 * Method to set the value of field series_hash
	 *
	 * @param string $series_hash
	 *
	 * @return $this
	 * @throws InvalidArgumentException
	 */
	public function setSeriesHash($series_hash)
	{
		if (trim($series_hash) == '')
		{
			throw new InvalidArgumentException('The series hash value cannot be empty.');
		}
		
		$this->series_hash = $series_hash;
		
		return $this;
	}
	
	/**
	 * Method to set the value of field expires_at
	 *
	 * @param DateTime $expires_at
	 *
	 * @return $this
	 */
	public function setExpiresAt(DateTime $expires_at)
	{
		$this->expires_at = $expires_at;
		
		return $this;
	}
	
	/**
	 * Returns the value of field user_id
	 *
	 * @return integer
	 */
	public function getUserId()
	{
		return (int) $this->user_id;
	}
	
	/**
	 * Returns the value of field series
	 *
	 * @return string
	 */
	public function getSeries()
	{
		return $this->series;
	}
	
	/**
	 * Returns the value of field series_hash
	 *
	 * @return string
	 */
	public function getSeriesHash()
	{
		return $this->series_hash;
	}
	
	/**
	 * Returns the value of field expires_at
	 *
	 * @return DateTime
	 */
	public function getExpiresAt()
	{
		if ( ! ($this->expires_at instanceof DateTime))
		{
			try
			{
				return $this->expires_at = new DateTime($this->expires_at);
			}
			catch (\Exception $e)
			{
			}
			
			return null;
		}
		
		return $this->expires_at;
	}
	
	/**
	 * Called before save.
	 */
	public function beforeSave()
	{
		if ($this->expires_at instanceof DateTime)
		{
			$this->expires_at = $this->expires_at->format('Y-m-d H:i:s');
		}
	}
	
	/**
	 * Allows to query a set of records that match the specified conditions
	 *
	 * @param mixed $parameters
	 *
	 * @return UserToken[]|UserToken|\Phalcon\Mvc\Model\ResultSetInterface
	 */
	public static function find($parameters = null)
	{
		return parent::find($parameters);
	}
	
	/**
	 * Allows to query the first record that match the specified conditions
	 *
	 * @param mixed $parameters
	 *
	 * @return UserToken|\Phalcon\Mvc\Model\ResultInterface
	 */
	public static function findFirst($parameters = null)
	{
		return parent::findFirst($parameters);
	}
	
}
